// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Server.Features.EFCore;

#nullable disable

namespace Server.Features.EFCore.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240322042015_crawledcontentignored")]
    partial class crawledcontentignored
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Server.Features.ContentFeed.CrawledContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Content")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<bool>("Ignored")
                        .HasColumnType("bit");

                    b.Property<int>("Source")
                        .HasColumnType("int");

                    b.Property<string>("Startup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("CrawledContents");
                });

            modelBuilder.Entity("Server.Features.ContentFeed.StartupContent", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Domain")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Startup")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StartupId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("StartupContents");

                    b.HasData(
                        new
                        {
                            Id = new Guid("f01dcd67-755f-42eb-9724-707b0fbc6de6"),
                            Date = new DateTime(2023, 12, 13, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(5949),
                            Description = "New funding for the startup.",
                            Startup = "Cleantech",
                            StartupId = new Guid("80e98adc-842a-43fc-afe5-bebd3ed61690"),
                            Title = "Newly funded Startup",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("da418a0c-4ae4-472f-b59e-3cf0b36176ee"),
                            Date = new DateTime(2023, 9, 4, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6147),
                            Description = "The 1000 customer could be onboarded to the platform last week",
                            Startup = "Cleantech",
                            StartupId = new Guid("80e98adc-842a-43fc-afe5-bebd3ed61690"),
                            Title = "1000th customer",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("d74e0d3e-aa61-49da-8b8d-02e8d0aacfb0"),
                            Date = new DateTime(2024, 2, 21, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6171),
                            Description = "We have 3 new openings in the marketing department",
                            Startup = "Cleantech",
                            StartupId = new Guid("80e98adc-842a-43fc-afe5-bebd3ed61690"),
                            Title = "Expanding marketing team",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("ef2e1e03-c1be-42b9-bf7c-c6b074b4ffc2"),
                            Date = new DateTime(2023, 12, 24, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6192),
                            Description = "From now on, we visit all our customers by train",
                            Startup = "Cleantech",
                            StartupId = new Guid("80e98adc-842a-43fc-afe5-bebd3ed61690"),
                            Title = "Taking the train for business tripps",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("0e828591-f39d-4c4e-9edd-6442bdf96a84"),
                            Date = new DateTime(2024, 1, 12, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6311),
                            Description = "We have 3 new openings in the finance department",
                            Startup = "MedDents",
                            StartupId = new Guid("6bbacfb4-f48c-492d-b5cb-385aab7da2c7"),
                            Title = "Bigger finance team",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("10400350-6671-4a2f-af99-e222b9092c3d"),
                            Date = new DateTime(2023, 12, 3, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6336),
                            Description = "We have a new partner manager",
                            Startup = "MedDents",
                            StartupId = new Guid("6bbacfb4-f48c-492d-b5cb-385aab7da2c7"),
                            Title = "Welcoming new faces",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("a53913f6-6577-4a8d-b160-17f898e24c3f"),
                            Date = new DateTime(2024, 3, 19, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6356),
                            Description = "We could reduce our ecological footprint",
                            Startup = "Cleantech",
                            StartupId = new Guid("80e98adc-842a-43fc-afe5-bebd3ed61690"),
                            Title = "Succesfully reduced carbon footprint",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("dee34979-b33a-48d4-b944-e419547c28bf"),
                            Date = new DateTime(2024, 2, 17, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6380),
                            Description = "After intense preparation we are now ISO certified",
                            Startup = "Cleantech",
                            StartupId = new Guid("80e98adc-842a-43fc-afe5-bebd3ed61690"),
                            Title = "ISO certification",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("5a87eaa2-59eb-4c25-ad28-f3c23776639d"),
                            Date = new DateTime(2022, 11, 16, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6398),
                            Description = "Successfully mitigated a hacker attack",
                            Startup = "Cleantech",
                            StartupId = new Guid("80e98adc-842a-43fc-afe5-bebd3ed61690"),
                            Title = "Prevented a hacker attack",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("d887de81-01aa-4f21-9f76-ab00c2cb2804"),
                            Date = new DateTime(2023, 12, 21, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6419),
                            Description = "we are undergoing a reorganization",
                            Startup = "Cleantech",
                            StartupId = new Guid("80e98adc-842a-43fc-afe5-bebd3ed61690"),
                            Title = "Re-org to ensure competitivness",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("fb32ef69-7f50-49a7-9535-fafcd0223ddf"),
                            Date = new DateTime(2024, 2, 22, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6437),
                            Description = "we are saving emissons by working remote",
                            Startup = "Cleantech",
                            StartupId = new Guid("80e98adc-842a-43fc-afe5-bebd3ed61690"),
                            Title = "working remote saves emissions",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("4cdb2fd8-f92f-4f7a-b1af-2f8f69a6146c"),
                            Date = new DateTime(2024, 3, 13, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6456),
                            Description = "we are saving emissons by working remote",
                            Startup = "Cleantech",
                            StartupId = new Guid("80e98adc-842a-43fc-afe5-bebd3ed61690"),
                            Title = "working remote saves emissions",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("51153198-a9c5-44ce-b634-4a612a555b02"),
                            Date = new DateTime(2024, 2, 10, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6510),
                            Description = "Forbes Latam named us one of the 20 most promising startups.",
                            Startup = "AI Farmers",
                            StartupId = new Guid("23b79f88-4f80-4b62-99d7-f8704ec6b0d6"),
                            Title = "Forbes LATAM Top 20 startups",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("70718807-8383-46d4-b5b6-80a39ec95328"),
                            Date = new DateTime(2024, 3, 15, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6532),
                            Description = "We raised our 2 million Series A round",
                            Startup = "AI Farmers",
                            StartupId = new Guid("23b79f88-4f80-4b62-99d7-f8704ec6b0d6"),
                            Title = "Big series A",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("0b96a1cf-e6a7-4ccf-b01f-9819601dce70"),
                            Date = new DateTime(2024, 3, 21, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6552),
                            Description = "Our engineering team looks for promising colleagues.",
                            Startup = "AI Farmers",
                            StartupId = new Guid("23b79f88-4f80-4b62-99d7-f8704ec6b0d6"),
                            Title = "Open jobs in engineering",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("fdb7a714-9120-461e-9115-ce3ab2be8687"),
                            Date = new DateTime(2023, 12, 13, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6571),
                            Description = "We are currently managing more then 100 square kilometres of farm land",
                            Startup = "AI Farmers",
                            StartupId = new Guid("23b79f88-4f80-4b62-99d7-f8704ec6b0d6"),
                            Title = "Managing more then 100 square kilometres of farm land",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("97e76191-411b-46aa-83de-939e22ef507f"),
                            Date = new DateTime(2024, 2, 1, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6589),
                            Description = "We are developping are more resilient type of seeds together with our parterns",
                            Startup = "AI Farmers",
                            StartupId = new Guid("23b79f88-4f80-4b62-99d7-f8704ec6b0d6"),
                            Title = "Developing more resilient seed type",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("a12d5f9b-bc2c-4771-9e4d-85ab96a39922"),
                            Date = new DateTime(2024, 2, 12, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6645),
                            Description = "The 100rd restaurant uses our software",
                            Startup = "BiteAI",
                            StartupId = new Guid("7e342316-00f4-4dbe-adb4-b306c61f83d9"),
                            Title = "100 customer",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("30f7bd1a-4351-4539-95df-df5445a5b66e"),
                            Date = new DateTime(2024, 2, 29, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6664),
                            Description = "With our AI we can help in saving emissions",
                            Startup = "BiteAI",
                            StartupId = new Guid("7e342316-00f4-4dbe-adb4-b306c61f83d9"),
                            Title = "We minimize food waste with AI",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("4a4fa17f-1cd7-4698-ad1a-963c074836bb"),
                            Date = new DateTime(2023, 8, 15, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6686),
                            Description = "We now operate with a Co-Ceo",
                            Startup = "BiteAI",
                            StartupId = new Guid("7e342316-00f4-4dbe-adb4-b306c61f83d9"),
                            Title = "Starting with 2 Co-Ceos",
                            Type = 1
                        },
                        new
                        {
                            Id = new Guid("34902ac4-0539-4cd7-8160-8306783e31f0"),
                            Date = new DateTime(2023, 11, 23, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6706),
                            Description = "We are actively searching for new investors",
                            Startup = "BiteAI",
                            StartupId = new Guid("7e342316-00f4-4dbe-adb4-b306c61f83d9"),
                            Title = "Searching for new investors",
                            Type = 0
                        },
                        new
                        {
                            Id = new Guid("94bf5229-810a-4e22-bdff-a62f23170052"),
                            Date = new DateTime(2024, 1, 15, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6801),
                            Description = "We are officially licensed for use in courts",
                            Startup = "BiteAI",
                            StartupId = new Guid("ce6fde70-4104-4474-b27b-a44b660d5bb8"),
                            Title = "Licensed for use in courts",
                            Type = 3
                        },
                        new
                        {
                            Id = new Guid("3d20a25d-faae-4e99-8c55-20f2dc7ac996"),
                            Date = new DateTime(2024, 2, 27, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6821),
                            Description = "We are now partnering with charities",
                            Startup = "BiteAI",
                            StartupId = new Guid("ce6fde70-4104-4474-b27b-a44b660d5bb8"),
                            Title = "Partnerin with charities",
                            Type = 2
                        },
                        new
                        {
                            Id = new Guid("ac6ca34a-00d9-4834-b7cc-f54061e9070c"),
                            Date = new DateTime(2024, 2, 27, 5, 20, 14, 948, DateTimeKind.Local).AddTicks(6878),
                            Description = "We are enabling scientific breakthroughs",
                            Startup = "BiteAI",
                            StartupId = new Guid("ae01882d-4ccf-4b47-9bbc-c5c2f4105297"),
                            Title = "Enabling scientific breakthroughs",
                            Type = 2
                        });
                });

            modelBuilder.Entity("Server.Features.Founders.Domain.Founder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("MobileEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Founders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("107a92b8-ccdd-4490-88e6-119b8bfcd879"),
                            Email = "test.founder@fellowship.com",
                            MobileEnabled = false,
                            MobileNumber = "45454556"
                        },
                        new
                        {
                            Id = new Guid("86cc8e96-c9f4-4a52-b4d7-91547072f85f"),
                            Email = "medtech@email.com",
                            MobileEnabled = false,
                            MobileNumber = "45454556"
                        },
                        new
                        {
                            Id = new Guid("7086a1ef-a32e-4edc-bc4c-78328ad605ab"),
                            Email = "aiFarmers@email.com",
                            MobileEnabled = false,
                            MobileNumber = "45454556"
                        },
                        new
                        {
                            Id = new Guid("e678854a-7aad-41a0-844a-06b7cd0b1d1e"),
                            Email = "aiRestaurant@email.com",
                            MobileEnabled = false,
                            MobileNumber = "45454556"
                        },
                        new
                        {
                            Id = new Guid("5abf95d8-8fae-4794-a8b7-f4e492935e36"),
                            Email = "legaltech@email.com",
                            MobileEnabled = false,
                            MobileNumber = "45454556"
                        },
                        new
                        {
                            Id = new Guid("4334d9ff-b4be-4b2e-8333-98d5a17321c8"),
                            Email = "fibers@email.com",
                            MobileEnabled = false,
                            MobileNumber = "45454556"
                        });
                });

            modelBuilder.Entity("Server.Features.Startups.Domain.StartUp", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Batch")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discipline")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FounderEmail")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Location")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("URI")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Startups");

                    b.HasData(
                        new
                        {
                            Id = new Guid("80e98adc-842a-43fc-afe5-bebd3ed61690"),
                            Batch = "2024",
                            Description = "SaaS for cleaning companies",
                            Discipline = "SaaS",
                            FounderEmail = "test.founder@fellowship.com",
                            Location = "Brazil",
                            Name = "Cleantech",
                            URI = "www.cleantech.com"
                        },
                        new
                        {
                            Id = new Guid("6bbacfb4-f48c-492d-b5cb-385aab7da2c7"),
                            Batch = "2022",
                            Description = "Medtech for dentists",
                            Discipline = "Medtech",
                            FounderEmail = "medtech@email.com",
                            Location = "Ecuador",
                            Name = "MedDents",
                            URI = "www.medtech.com"
                        },
                        new
                        {
                            Id = new Guid("23b79f88-4f80-4b62-99d7-f8704ec6b0d6"),
                            Batch = "2023",
                            Description = "AI for the farming industry",
                            Discipline = "SaaS",
                            FounderEmail = "aiFarmers@email.com",
                            Location = "Argentina",
                            Name = "AI Farmers",
                            URI = "www.farmingwithai.com"
                        },
                        new
                        {
                            Id = new Guid("7e342316-00f4-4dbe-adb4-b306c61f83d9"),
                            Batch = "2024",
                            Description = "Making restaurants more effective with AI",
                            Discipline = "SaaS",
                            FounderEmail = "aiRestaurant@email.com",
                            Location = "Argentina",
                            Name = "BiteAI",
                            URI = "www.biteai.com"
                        },
                        new
                        {
                            Id = new Guid("ce6fde70-4104-4474-b27b-a44b660d5bb8"),
                            Batch = "2022",
                            Description = "Search engine for lawyers",
                            Discipline = "Legaltech",
                            FounderEmail = "legaltech@email.com",
                            Location = "Ecuador",
                            Name = "SearchLaw",
                            URI = "www.searchlaw.com"
                        },
                        new
                        {
                            Id = new Guid("ae01882d-4ccf-4b47-9bbc-c5c2f4105297"),
                            Batch = "2022",
                            Description = "Microfibers for efficient materials",
                            Discipline = "Deeptech",
                            FounderEmail = "fibers@email.com",
                            Location = "Ecuador",
                            Name = "Fiberfficient",
                            URI = "www.fiberficcient.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
